#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun Feb 19 13:53:24 2012

import wx

# begin wxGlade: extracode
from wxRayTrace.gui.glplotframe import glCanvas
# end wxGlade



class OGLFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: OGLFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.glcanvas = glCanvas(self)
        self.label_1 = wx.StaticText(self, -1, "Translate")
        self.trUp = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-up.png", wx.BITMAP_TYPE_ANY))
        self.trLeft = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-left.png", wx.BITMAP_TYPE_ANY))
        self.trRight = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-right.png", wx.BITMAP_TYPE_ANY))
        self.trDown = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-down.png", wx.BITMAP_TYPE_ANY))
        self.label_2 = wx.StaticText(self, -1, "Rotate")
        self.rotUp = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-up.png", wx.BITMAP_TYPE_ANY))
        self.rotLeft = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-left.png", wx.BITMAP_TYPE_ANY))
        self.rotRight = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-right.png", wx.BITMAP_TYPE_ANY))
        self.rotDown = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-down.png", wx.BITMAP_TYPE_ANY))
        self.label_3 = wx.StaticText(self, -1, "Spin")
        self.spCCW = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-left.png", wx.BITMAP_TYPE_ANY))
        self.spCW = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-right.png", wx.BITMAP_TYPE_ANY))
        self.label_4 = wx.StaticText(self, -1, "Zoom")
        self.zmIn = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-left.png", wx.BITMAP_TYPE_ANY))
        self.zmOut = wx.BitmapButton(self, -1, wx.Bitmap("/usr/share/icons/oxygen/32x32/actions/arrow-right.png", wx.BITMAP_TYPE_ANY))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnUp, self.trUp)
        self.Bind(wx.EVT_BUTTON, self.OnLeft, self.trLeft)
        self.Bind(wx.EVT_BUTTON, self.OnRight, self.trRight)
        self.Bind(wx.EVT_BUTTON, self.OnDown, self.trDown)
        self.Bind(wx.EVT_BUTTON, self.OnSpUp, self.rotUp)
        self.Bind(wx.EVT_BUTTON, self.OnSpLeft, self.rotLeft)
        self.Bind(wx.EVT_BUTTON, self.OnSpRight, self.rotRight)
        self.Bind(wx.EVT_BUTTON, self.OnSpDown, self.rotDown)
        self.Bind(wx.EVT_BUTTON, self.OnSpCCW, self.spCCW)
        self.Bind(wx.EVT_BUTTON, self.OnSpCW, self.spCW)
        self.Bind(wx.EVT_BUTTON, self.OnZmOut, self.zmIn)
        self.Bind(wx.EVT_BUTTON, self.OnZmIn, self.zmOut)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: OGLFrame.__set_properties
        self.SetTitle("pyoptools Optical System Preview")
        self.glcanvas.SetMinSize((640,480))
        self.trUp.SetSize(self.trUp.GetBestSize())
        self.trLeft.SetSize(self.trLeft.GetBestSize())
        self.trRight.SetSize(self.trRight.GetBestSize())
        self.trDown.SetSize(self.trDown.GetBestSize())
        self.rotUp.SetSize(self.rotUp.GetBestSize())
        self.rotLeft.SetSize(self.rotLeft.GetBestSize())
        self.rotRight.SetSize(self.rotRight.GetBestSize())
        self.rotDown.SetSize(self.rotDown.GetBestSize())
        self.spCCW.SetSize(self.spCCW.GetBestSize())
        self.spCW.SetSize(self.spCW.GetBestSize())
        self.zmIn.SetSize(self.zmIn.GetBestSize())
        self.zmOut.SetSize(self.zmOut.GetBestSize())
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: OGLFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_3_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1_copy = wx.GridSizer(3, 3, 0, 0)
        grid_sizer_1 = wx.GridSizer(3, 3, 0, 0)
        sizer_2.Add(self.glcanvas, 1, wx.EXPAND, 0)
        sizer_4.Add(self.label_1, 0, 0, 0)
        grid_sizer_1.Add((32, 32), 0, 0, 0)
        grid_sizer_1.Add(self.trUp, 0, 0, 0)
        grid_sizer_1.Add((32, 32), 0, 0, 0)
        grid_sizer_1.Add(self.trLeft, 0, 0, 0)
        grid_sizer_1.Add((32, 32), 0, 0, 0)
        grid_sizer_1.Add(self.trRight, 0, 0, 0)
        grid_sizer_1.Add((32, 32), 0, 0, 0)
        grid_sizer_1.Add(self.trDown, 0, 0, 0)
        grid_sizer_1.Add((32, 32), 0, 0, 0)
        sizer_4.Add(grid_sizer_1, 0, wx.EXPAND, 12)
        sizer_4.Add(self.label_2, 0, 0, 0)
        grid_sizer_1_copy.Add((32, 32), 0, 0, 0)
        grid_sizer_1_copy.Add(self.rotUp, 0, 0, 0)
        grid_sizer_1_copy.Add((32, 32), 0, 0, 0)
        grid_sizer_1_copy.Add(self.rotLeft, 0, 0, 0)
        grid_sizer_1_copy.Add((32, 32), 0, 0, 0)
        grid_sizer_1_copy.Add(self.rotRight, 0, 0, 0)
        grid_sizer_1_copy.Add((32, 32), 0, 0, 0)
        grid_sizer_1_copy.Add(self.rotDown, 0, 0, 0)
        grid_sizer_1_copy.Add((32, 32), 0, 0, 0)
        sizer_4.Add(grid_sizer_1_copy, 0, wx.EXPAND, 12)
        sizer_4.Add(self.label_3, 0, 0, 0)
        sizer_3.Add(self.spCCW, 0, 0, 0)
        sizer_3.Add((32, 32), 0, 0, 0)
        sizer_3.Add(self.spCW, 0, 0, 0)
        sizer_4.Add(sizer_3, 0, wx.EXPAND, 0)
        sizer_4.Add(self.label_4, 0, 0, 0)
        sizer_3_copy.Add(self.zmIn, 0, 0, 0)
        sizer_3_copy.Add((32, 32), 0, 0, 0)
        sizer_3_copy.Add(self.zmOut, 0, 0, 0)
        sizer_4.Add(sizer_3_copy, 0, wx.EXPAND, 0)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def OnUp(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnUp' not implemented!"
        event.Skip()

    def OnLeft(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnLeft' not implemented!"
        event.Skip()

    def OnRight(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnRight' not implemented!"
        event.Skip()

    def OnDown(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnDown' not implemented!"
        event.Skip()

    def OnSpUp(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnSpUp' not implemented!"
        event.Skip()

    def OnSpLeft(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnSpLeft' not implemented!"
        event.Skip()

    def OnSpRight(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnSpRight' not implemented!"
        event.Skip()

    def OnSpDown(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnSpDown' not implemented!"
        event.Skip()

    def OnSpCCW(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnSpCCW' not implemented!"
        event.Skip()

    def OnSpCW(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnSpCW' not implemented!"
        event.Skip()

    def OnZmOut(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnZmOut' not implemented!"
        event.Skip()

    def OnZmIn(self, event): # wxGlade: OGLFrame.<event_handler>
        print "Event handler `OnZmIn' not implemented!"
        event.Skip()

# end of class OGLFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    oglFrame = OGLFrame(None, -1, "")
    app.SetTopWindow(oglFrame)
    oglFrame.Show()
    app.MainLoop()
